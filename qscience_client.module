<?php
/**
 * @file
 * QScience Client module.
 * This module allows the user to send the full QScience configuration
 * to the patterns official server very easily, providing a new "QScience" tab with a
 * "one click" to send my QScience configuration button.
 * Checks that the requirements are fulfilled and offers a set of quick links to perform
 * them automatically in case they are not satisfied.
 *
 * @TO-DO
 *  - Send a automatically acceptable friendship request in
 *    _qscience_client_automatic_friendship(). Pending on changes on D2D (see l.136)
 */

module_load_include('inc', 'patterns_client', 'includes/util');

/**
 * Implements hook_menu().
 */
function qscience_client_menu() {
  // This goes in first position in the admin menu.
  $items['admin/qscience'] = array(
    'title' => 'QScience',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('qscience_client_page'),
    'access arguments' => array('access administration pages'),
    'weight' => -20,
  );
  $items['admin/qscience/automatic-friendship'] = array(
    'page callback' => '_qscience_client_automatic_friendship',
    'access arguments' => array('access administration pages'),
  );
//  $items['admin/qscience/automatic-credentials'] = array(
//    'page callback' => '_qscience_client_automatic_credentials',
//    'access callback' => !patterns_client_is_user_registered_on_server(PATTERNS_OFFICIAL_SERVER_XMLRPC),
//  );
  return $items;
}
/**
 * Menu callback; implements hook_form().
 *
 * Display the QScience client page.
 */
function qscience_client_page($form, $form_state) {
  $form = array();

  $form['main'] = array(
    '#type' => 'container',
    '#title' => t('QScience'),
  );
  $form['main']['description'] = array(
    '#markup' => t('Here you can quickly connect to the Patterns, and D2D server, to join the QScience network. <strong>Important</strong>: for joining the official Patterns and D2D server you need to have a public address and not localhost.'),
  );

  $form['main']['d2d'] = array(
    '#type' => 'fieldset',
    '#title' => t('D2D'),
  );
  $form['main']['d2d']['d2d_client'] = qscience_client_d2d_form();

  $form['main']['patterns'] = array(
    '#type' => 'fieldset',
    '#title' => t('Patterns'),
  );
  $form['main']['patterns']['patterns_client'] = qscience_client_patterns_form();

  $form['main']['d2dsearch'] = array(
    '#type' => 'fieldset',
    '#title' => t('D2D Search'),
    '#description' => t('Search for papers in your network of D2D friends.'),
  );
  $form['main']['d2dsearch']['d2dsearchlink'] = qscience_client_d2dsearch_form();

  return $form;
}


/**
 * Checks if the requirements to generate a pattern and send it to the "official" server
 * are fulfilled. In that case, enables a button to export and push a pattern in just
 * one click.
 *
 * @return array
 *   A form array to be built by drupal_get_form().
 */
function qscience_client_d2d_form() {

  $d2d_link = l(t('D2D settings'), 'admin/d2d');

  $automatic_friendship_link = l(t('Establish friendship automatically'),
                               'admin/qscience/automatic-friendship-d2d');

  $auto_or_manual = t('!auto Go to the !manual to do it manually.', array(
    '!auto' => $automatic_friendship_link,
    '!manual'=> $d2d_link,
  ));

  $url = variable_get('D2D_PASSPORT_SERVER_URL', FALSE);

  // Check if there is D2D server registered, else show default.
  if (!$url) {
    $d2d_server_link = l('D2D Server', D2D_PASSPORT_OFFICIAL_SERVER, array(
      'attributes' => array('target' => '_blank'),
    ));
    $url_check = t('You have <strong>not</strong> selected a server. The official !server will be used.', array(
      '!server' => $d2d_server_link,
      '!autofriend' => $automatic_friendship_link,
    ));
    $instance = array( 'is_friend' => FALSE );
  }
  else {

    $instances = d2d_api_instance_get();
    foreach ($instances as $i) {
      if ($i['is_me'] === 1) {
        // Falsy.
        continue;
      }
      if ($i['url'] === $url) {
        $instance = $i;
        break;
      }
    }

    $d2d_server_link = l('D2D Server', $url, array(
      'attributes' => array('target' => '_blank'),
    ));
    // Check if it is the official D2D Server.
    $is_official = D2D_PASSPORT_OFFICIAL_SERVER_XMLRPC === $url;
    if ($is_official) {
      $url_check = t('Set to the official !server', array(
        '!server' => $d2d_server_link,
      ));
    }
    else {
      $unofficial_d2d_server_link = l($url, $url, array(
        'attributes' => array('target' => '_blank'),
      ));
      $url_check = t('!url - different from official !server', array(
        '!server' => $d2d_server_link,
        '!url' => $unofficial_d2d_server_link,
      ));
    }
  }

  // Are we friend with it ?
  if (!$instance['is_friend']) {
    $friend_check = t('You are <strong>not</strong> friend with !server. !autofriend.', array(
      '!server' => $d2d_server_link,
      '!autofriend' => $automatic_friendship_link,
    ));
  }
  else {
    $friend_check = t('Friendship established.');
  }

  $form['status'] = array(
    '#markup' => t('Increase your visibility, and find new communities with shared interests: register your web site in the D2D Server!'),
  );
  $header = array(
    array('data' => t('Requirement')),
    array('data' => t('State / Actions')),
	);
  $rows[] = array(
    array('data' => t('D2D Server selected.')),
    array('data' => $url_check),
	);
	$rows[] = array(
    array('data' => t('Friendship established with !d2d_server.', array(
      '!d2d_server' => $d2d_server_link,
    ))),
    array('data' => $friend_check),
	);
	$form['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
	);
	return $form;
}

/**
 * Checks if the requirements to generate a pattern and send it to
 * the "official" server are fulfilled. In that case, enables a button to
 * export and push a pattern in just one click.
 *
 * @return array
 *   A form array to be built by drupal_get_form().
 */
function qscience_client_patterns_form() {

  $info = patterns_client_check_credentials_and_display_warns();

  $d2d_link = l(t('D2D settings'), 'admin/d2d');

  $automatic_friendship_link =l(t('Establish friendship automatically'),
                              'admin/qscience/automatic-friendship');

  $auto_or_manual = t('!auto Go to the !manual to do it manually.', array(
    '!auto' => $automatic_friendship_link,
    '!manual'=> $d2d_link,
  ));

  $patterns_share_link = l(t('Patterns Share settings'), 'admin/patterns/share');

  // Check if there is Patterns server registered, else show default.
  if (!$info['url']) {
    $patterns_server_link = l('Patterns Server', PATTERNS_CLIENT_OFFICIAL_SERVER, array(
      'attributes' => array('target' => '_blank'),
    ));
    $url_check = t('Not set. Choose the official !server and establish friendship.', array(
      '!server' => $patterns_server_link,
    ));
  }
  else {
    $url = $info['url'];
    $patterns_server_link = l('Patterns Server', $url, array(
      'attributes' => array('target' => '_blank'),
    ));
    // Check if it is the official Patterns Server.
    $is_official = PATTERNS_CLIENT_OFFICIAL_SERVER_XMLRPC === $url;
    if ($is_official) {
      $url_check = t('Set to the official !server.', array(
        '!server' => $patterns_server_link,
      ));
    }
    else {
      $unofficial_patterns_server_link = l($url, $url, array(
        'attributes' => array('target' => '_blank'),
      ));
      $url_check = t('!url - different from official !server', array(
        '!server' => $patterns_server_link,
        '!url' => $unofficial_patterns_server_link,
      ));
    }
  }


  // Are we friend with it ?
  if (!$info['friend']) {
    $friend_check = t('You are <strong>not</strong> friend with !server. !autofriend.', array(
      '!server' => $patterns_server_link,
      '!autofriend' => $automatic_friendship_link,
    ));
  }
  else {
    $friend_check = t('Friendship established.');
  }

  // Have we registered a username ?
  $credentials = $info['credentials'];
  if (empty($credentials)) {
    $credentials_check = t('User <strong>not</strong> registered / set. Please visit !patterns_share to create your account.',
                         array('!patterns_share' => $patterns_share_link));
  }
  else {
    $credentials_check = t('Username: !user.', array(
      '!user' => $credentials['user'],
    ));
  };

  $form['status'] = array(
    '#markup' => t('Share your QScience settings and at the same type follow the last updates: register your username on Patterns Server!'),
  );
  $header = array(
    array('data' => t('Requirement')),
    array('data' => t('State / Actions')),
	);
  $rows[] = array(
    array('data' => t('Patterns Server selected.')),
    array('data' => $url_check),
	);
	$rows[] = array(
    array('data' => t('Friendship established with !patterns_server.', array(
      '!patterns_server' => $patterns_server_link,
    ))),
    array('data' => $friend_check),
	);
	$rows[] = array(
    array('data' => t('User registered at !patterns_server.', array('!patterns_server' => $patterns_server_link))),
    array('data' => $credentials_check),
	);
	$form['table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
	);
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Share "My QScience instance" configuration'),
    '#disabled' => !$info['ready'],
    '#submit' => array('qscience_client_patterns_form_submit'),
	);

	return $form;
}


/**
 * Implements hook_submit().
 * Export a pattern with the settings from the custom modules provided
 * by the QScience distribution, and send it to the official Patterns server.
 */
function qscience_client_patterns_form_submit($form, &$form_state) {
  global $user;
  global $base_url;
  // Load patterns_io components
  patterns_io_load_components(TRUE);
  // Prepare the info headers, generated manually
  $info = array();
  $info['title']  = 'QScience configuration of ' . $base_url;
  $info['category']  = 'QScience';
  $info['description']  = 'Automatically extracted configuration for QTR, VisualScience and D2D modules';
  $info['version']  = '1.0';
  $info['core']  = '7.x';
  $info['author']  = $user->name;
  $info['author_email']  = $user->mail;
  $info['author_website']  = $base_url;
  // Prepare the exports array "manually". For the moment only QTR, VisualScience and D2D
  $exports = array();
  $exports['qtr']['qtr_parameters']['export'][] = 'qtr_patterns_export_parameters';
  $exports['visualscience']['visualscience_config']['export'][] = 'visualscience_export_config';
  $exports['d2d']['d2d_friendship']['export'][] = 'd2d_patterns_export_all_friendships';
  $exports['d2d']['d2d_group']['export'][] = 'd2d_patterns_export_all_groups';
  $exports['d2d']['d2d_settings']['export'][] = 'd2d_patterns_export_settings';
  // Create a new filename with a timestamp
  $filename = 'qscience_modules_' . date_timestamp_get(date_create()) . '.yaml';
  $dir = patterns_path_get_files_dir();
  if (patterns_export_start_engine($filename, $exports, $info, PATTERNS_EXPORT_TO_DB, 'yaml', 'php', 'modify')) {
    // Prepare a "limited" version of the pattern object with the mandatory attributes
    $p = (object) array(
      'name' => $filename,
      'format'=>'yaml',
      'file'=>patterns_path_get_files_dir() . '/' . $filename);
    patterns_client_push_patterns(array($p));
  }
  else{
    drupal_set_message(t('It was not possible to export the configuration of the QScience modules.'), 'error');
  }
}

/**
 * Checks if the requirements to generate a pattern and send it to the "official" server
 * are fulfilled. In that case, enables a button to export and push a pattern in just
 * one click.
 *
 * @return array
 *   A form array to be built by drupal_get_form().
 */
function qscience_client_d2dsearch_form() {
  $form['status'] = array(
    '#markup' => '<br/>' . l(t('Search for papers now.'), 'qscience_search'),
  );
  return $form;
}

/**
 * Establish a friendship with Patterns Server automatically.
 * @TO-DO: Send a friendship request that gets automatically accepted
 * by the server, once the changes on D2D allow this operation (see line 192).
 */
function _qscience_client_automatic_friendship() {

//  Idea:
//    - Get ID, name and description
//    - Add instance d2d_api_instance_add($instance)
//    - Retrieve and select public key
//    - Send a automatically friendship request
//    - Check that has been successfuly accepted

  $info = patterns_client_check_credentials_and_display_warns();

  if ($info['friend']) {
    drupal_set_message(t('Friendship with server already established. Nothing to do.'),
      'warning');
    drupal_goto('admin/qscience');
    return;
  }

  if (!$info['url']) {
    // It means that the user is asking to do the whole process and using
    // the default server. Otherwise, server must be set in Patterns Client.
    $info['url'] = PATTERNS_CLIENT_OFFICIAL_SERVER_XMLRPC;
  }

  if (!$info['d2d_id']) {
    // Get ID, name and description automatically.
    $res = xmlrpc($info['url'], array('d2d.getInstanceInformation' => array()));
    if ($res === FALSE) {
      drupal_set_message(t('Error retrieving information from other instance.'),
        'error');
      drupal_goto('admin/qscience');
    }

    $instance = d2d_explode($res);
    if ($instance === FALSE || !d2d_check_array($instance, array(
      'd2d_id' => 'd2d_check_d2d_id',
      'name' => 'd2d_check_name',
      'description' => 'd2d_check_description',
    ))) {
      drupal_set_message(t('Information received from Patterns Server is invalid'),
        'error');
      drupal_goto('admin/qscience');
    }

    // If the data received is correct, add the url field and add the instance to the DB
    $instance['url'] = $info['url'];

    $info['id'] = d2d_api_instance_add($instance);
    $info['d2d_id'] = $instance['d2d_id'];
    $info['name'] = $instance['name'];
    $info['description'] = $instance['description'];
  }

  if (!$info['public_key']) {

    $res = d2d_api_public_key_request($info, TRUE);
    if (!$res) {
      // Other error messages already displayed.
      drupal_goto('admin/qscience');
    }
    // TODO: check length / format of received string.
    $public_key_id = d2d_api_public_key_return_id($info['d2d_id'], $res);
    if ($public_key_id !== FALSE) {
      drupal_set_message(t('Public key with id @id is already available in database.', array(
        '@id' => $public_key_id
      )), 'warning');
    }
    else {
      // Insert Public key in the DB
      $public_key_id = d2d_api_public_key_set($info['id'], $res);
    }

    if (d2d_api_public_key_select($info['id'], $public_key_id)) {
      drupal_set_message(t("Public key has been inserted into the DB and selected for this instance automatically"));
      // Send friendship request change (0->3).
      d2d_api_friendship_update($info['id'], 3, 0, d2d_api_own_instance_id_get());
      drupal_set_message(t("Friendship set."));
    }
  }
  drupal_goto('admin/qscience');
}


///**
// * Generates and sent automatic credentials to Patterns Server.
// */
//function _qscience_client_automatic_credentials() {
//  global $user;
//  //Set autopublish to TRUE and the official server
//  variable_set('patterns_client_auto_publish', TRUE);
//  variable_set('patterns_client_server', PATTERNS_OFFICIAL_SERVER_XMLRPC);
//  // We will user the e-mail of the user, and a random username and password
//  $username = 'qscience_' . user_password(6);
//  $pass = user_password(12);
//  drupal_set_message(t('Your automatically generated credentials - username: !username - password: !pass',
//      array('!username' => $username, '!pass' => $pass)));
//  // This function currently does not return anything (true/false).
//  // Therefore we'll display the credentials first and show the error displayed by the function if any
//  patterns_client_register_user_on_server(PATTERNS_OFFICIAL_SERVER_XMLRPC, $username, $pass, $user->mail);
//  drupal_goto('admin/qscience');
//}